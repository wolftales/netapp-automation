---
- hosts: localhost
  gather_facts: false
  collections:
    - netapp.ontap
  
  module_defaults:
    group/netapp.ontap.netapp_ontap:
      hostname: "{{ netapp_hostname }}"
      username: "{{ netapp_username }}"
      password: "{{ netapp_password }}"
      https: true
      validate_certs: false
      use_rest: auto
  
  # Varible Precedence - files, prompt, vars
  # vars_files:
  # - vars_sample.yml
  vars_prompt:    # For NetApp Admin Credentials
    # - name: netapp_username
    #   prompt: NetApp 'admin'
    - name:     "netapp_password"
      prompt:   "Enter the NetApp Admin Password"
      private:  yes
      # confirm:   yes
  vars:
    netapp_hostname:  192.168.7.180
    netapp_username:  admin 
    netapp_password:    # Disabled - Use var_prompt
    state:            present
    vserver:          ontap-vs01
  
    export_policy_name: default
    rule_index:       1
    client_match:     0.0.0.0/0
    ro_rule:          sys
    rw_rule:          sys
    super_user:       sys
    protocol:         nfs
    anonymous_uid:    65534
    allow_suid:       true
    ntfs_unix_security: ignore

  tasks:

  # Export-policies - Create or Manage policies
  - name:   "Create SVM export_policy: {{ export_policy_name }}"
    netapp.ontap.na_ontap_export_policy:
      <<: *login
      state:    "{{ state }}"
      vserver:  "{{ vserver }}"

      name:     "{{ export_policy_name }}"
      
    when: state == 'present'

  # Manage Export-policies - Add rules
  - name: "{{ Add if state == present else Remove }} rule for SVM Export-policy"
    netapp.ontap.na_ontap_export_policy_rule:
      <<: *login
      state:    "{{ state }}"
      vserver:  "{{ vserver }}"

      policy_name: "{{ export_policy_name }}"
      client_match: "{{ client_match }}"
      rule_index: "{{ rule_index }}"
      ro_rule: "{{ ro_rule }}"
      rw_rule: "{{ rw_rule }}"
      super_user_security: "{{ super_user }}"
      protocol: "{{ protocol }}"
      anonymous_user_id: "{{ anonymous_uid }}"
      allow_suid: "{{ allow_suid }}"
      ntfs_unix_security: "{{ ntfs_unix_security }}"

    when: state == 'present'

  # Export-policies - Delete policies
  - name: "{{ Create if state == present else Delete }} Data SVM Export-policy"
    netapp.ontap.na_ontap_export_policy:
      <<: *login
      state:    "{{ state }}"
      vserver:  "{{ vserver }}"

      name: "{{ export_policy_name }}"
      
    when: state == 'absent'
