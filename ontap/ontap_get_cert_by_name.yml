################################################################################
#
#   Author      :   Ken Hillier
#   Date        :   25 January 2023
#
#   Description :   Workflow to illustrate get CERT by name
#
#   Dependencies: netapp.ontap collection
#
################################################################################
---
- hosts:                localhost
  name:                 Get Cert by name
  gather_facts:         false
  collections:
    -                   ansible.builtin
    -                   netapp.ontap
  vars:
    login: &login
      hostname:         "{{ netapp_hostname }}"
      username:         "{{ netapp_username }}"
      password:         "{{ netapp_password }}"
      https:            "{{ netapp_https }}"
      validate_certs:   "{{ netapp_validate_certs }}"
    state:              present

  vars_files:
    - vars/vars_ontap_sandbox.yml
    - 

  pre_tasks:
    #---------------------------------------------------------------------------
    # PRE VALIDATION STEPS:
    #  - Attempting to mimic as much of WFA controls as possible
    #  - This performs the minimum possible validation against inputs
    #---------------------------------------------------------------------------
  - name:                       "Asserting mandatory storage details are defined properly"
    assert:
      that:
        -                       netapp_hostname is defined
        -                       netapp_username is defined
        -                       netapp_password is defined
        -                       netapp_https is defined
        -                       netapp_validate_certs is defined
        -                       vserver is defined
      fail_msg:                 "One or more variables are missing from submission"

  tasks:

  # 

  ###
  # Lookup Tenant account_id - set find_account_id to `true` 
    - name: Lookup Tenant account_id byname
      block:

    ###
    # GRID INFO Collection
      - name: Get Grid INFO
        netapp.storagegrid.na_sg_grid_info:
          <<: *grid_auth
          gather_subset:
            # - all
            - grid/accounts
        register: grid_info_results

    ###
    # Debug: Print GRID-INFO Response
      # - name: Print GRID-INFO Response
      #   debug:
      #     var: grid_info_results

    ###
    # Debug: Print Tenant Account ID Byname
      # - name: "Print Tenant ID for {{ tenant.name }}"
      #   debug:
      #     msg:
      #       - "Tenant Name: {{ item.name }} Tenant ID: {{ item.id }}"
      #   with_items:
      #     - "{{ grid_info_results.sg_info['grid/accounts'].data }}"
      #   when: item.name == tenant.name

    ###
    # Find account_id for given tenant name
      - name: Set_Fact - tenant_id
        set_fact:
          tenant_id: "{{ item.id }}"
        with_items:
          - "{{ grid_info_results.sg_info['grid/accounts'].data }}"
        when: item.name|lower == tenant.name|lower

    ###
    # Debug: Print varible value
      # - name: 'DEBUG: Print Varible: tenant_id'
      #   debug:
      #     msg: "from set_fact: {{ tenant_id }}"

      # when: find_tenant_id is true 
    
    # End block
    ###

    ###
    # Tenant Authorization Token
    - name: Get Tenant Administrator user authorization token
      uri:
        url: "{{ grid.api_base_url }}/api/v3/authorize"
        method: POST
        validate_certs: false
        body_format: json
        body:
          {
            "accountId":  "{{ tenant.id }}",
            "username":   "{{ tenant.admin_username }}",
            "password":   "{{ tenant.admin_passwd }}",
            "cookie": false,
            "csrfToken": false,
          }
      register: tenant_auth_response
