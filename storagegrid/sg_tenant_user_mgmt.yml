###
# StorageGRID: Tenant User Management
# Description:
# Creates / Modifies / Deletes both administrative & end-user accounts
# 
# Requirements:
#  - Tenant Administrator - Can't be  done by normal user
#  - Tenant Account ID Required - no GRID admin override
#  - Tenant user name & access_key required for deletion
#  - Group needs to already exist
#  - 
#  - 
###
---
- name: "StorageGRID: Tenant User Management"
  hosts: localhost
  gather_facts: false
  collections:
    - ansible.builtin
    - netapp.storagegrid

  vars_files:
    # - vars/vars_sg_exampleLab.yml
    # - vars/vars_sg_tenant_creds.yml
    # - vars/vars_sg_tenant_users.yml
    # - vars/vars_sg_tenant_appid01.yml
    # - vars/vars_sg_tenant_users_appid01.yml

  vars:
    state:            present
    # grid:
    #   api_base_url:   https://192.168.7.215
    #   admin_username: root
    #   admin_passwd:   netapp1234
    tenant:
      api_url:        https://192.168.7.215
      name:           AppID01
      id:             '27370536033373718633'  # Enter account_id if not looking up byname && find_tenant_id == false
      admin_username: root
      admin_passwd:   netapp1234
    user:
      name:           testuser01
      full_name:     "Mr. Test User"
      passwd:         Ch@ng3Me1!
      group:          "group/{{ tenant.name }}"
      disable:        false
      update_passwd:  on_create

    ###
    # Authentication Bearer Tokens 
    # Tenant Authorization
    tenant_auth: &org_auth
      api_url:        "{{ tenant.api_url }}"
      auth_token:     "{{ tenant_auth_response.json.data }}"
      validate_certs: false

  tasks:

    ###
    # Tenant Authorization Token
    - name: Get Tenant Administrator user authorization token
      ansible.builtin.uri:
        url: "{{ tenant.api_url }}/api/v3/authorize"
        method: POST
        validate_certs: false
        body_format: json
        body:
          {
            "accountId":  "{{ tenant.id }}",
            "username":   "{{ tenant.admin_username }}",
            "password":   "{{ tenant.admin_passwd }}",
            "cookie":     false,
            "csrfToken":  false,
          }
      register: tenant_auth_response

    ###
    # Debug: Test ORG-AUTH & ORG-INFO is working
    ###
    # # ORG-INFO - ALL
    # - name: Get ORG Info
    #   netapp.storagegrid.na_sg_org_info:
    #     gather_subset:
    #       - all
    #     <<: *org_auth
    #   register: grid_info_results

    # # DEBUG: PPrint ORG-INFO Response
    # - name: Print GRID Response
    #   ansible.builtin.debug:
    #     var: grid_info_results

    ###
    # Create Tenant Users
    # - name: Create Multiple Tenant users with independant settings
    #   netapp.storagegrid.na_sg_org_user:
    #     <<: *org_auth

    #     state:            "{{ state }}"
    #     full_name:        "{{ item.name }}"
    #     unique_name:      "user/{{ item.name }}"
    #     password:         "{{ item.passwd }}"
    #     update_password:  "{{ item.update_password }}" # Default: on_create
    #     disable:          "{{ item.disable }}"
    #     member_of:        "group/{{ tenant.name }}"

    #   with_items:         "{{ users.user_list }}"
    #   no_log: false
    #   when: users.user_list != None

    # - name: Create Multiple Tenant users with common settings
    #   netapp.storagegrid.na_sg_org_user:
    #     <<: *org_auth

    #     state:            "{{ state }}"
    #     full_name:        "{{ item }}"
    #     unique_name:      "user/{{ item }}"
    #     password:         "{{ users.passwd }}"
    #     update_password:  "{{ users.update_passwd }}" # Default: on_create
    #     disable:          "{{ users.disable }}"
    #     member_of:        "group/{{ tenant.name }}"

    #   with_items:         "{{ users.users }}"
    #   no_log: false
    #   when: users.users != None

    - name: Create a Single Tenant user
      netapp.storagegrid.na_sg_org_user:
        <<: *org_auth

        state:            "{{ state }}"
        full_name:        "{{ user.full_name }}"
        unique_name:      "user/{{ user.name }}"
        password:         "{{ user.passwd }}"
        update_password:  "{{ user.update_passwd }}" # Default: on_create
        disable:          "{{ user.disable }}"
        member_of:        "group/{{ tenant.name }}"

      # with_items:         "{{ users.user }}"
      no_log: false
      # when: user.name