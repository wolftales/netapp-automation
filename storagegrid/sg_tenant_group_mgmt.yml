###
# StorageGRID: Tenant Group Management
# Description:
# Creates / Modifies / Deletes both administrative & end-user accounts
# 
# Requirements:
#  - Tenant Administrator - Can't be  done by normal user
#  - Tenant Account ID Required - no GRID admin override
#  - Tenant user name & access_key required for deletion
#  - 
#  - 
#  - 
###
---
- name: "StorageGRID: Tenant User Management"
  hosts: localhost
  gather_facts: false
  collections:
    - netapp.storagegrid

  vars_files:
    # - vars/vars_sg_exampleLab.yml
    # - vars/vars_sg_tenant_appid01.yml
    - vars/vars_sg_tenant_group_appid01.yml
    # - vars/vars_sg_tenant_users_appid01.yml

  vars:
    state:            present
    # grid:
    #   api_base_url:   https://192.168.7.215
    #   admin_username: root
    #   admin_passwd:   netapp1234
    tenant:
      api_url:        https://192.168.7.215
      name:           AppID01
      id:             '38493884429242321796'  # Enter account_id if not looking up byname && find_tenant_id == false
      admin_username: root
      admin_passwd:   netapp1234

    ###
    # Authentication Bearer Tokens 
    # Tenant Authorization
    tenant_auth: &org_auth
      api_url:        "{{ tenant.api_url }}"
      auth_token:     "{{ tenant_auth_response.json.data }}"
      validate_certs: false

  tasks:

    ###
    # Tenant Authorization Token
    - name: Get Tenant Administrator user authorization token
      uri:
        url: "{{ tenant.api_url }}/api/v3/authorize"
        method: POST
        validate_certs: false
        body_format: json
        body:
          {
            "accountId":  "{{ tenant.id }}",
            "username":   "{{ tenant.admin_username }}",
            "password":   "{{ tenant.admin_passwd }}",
            "cookie":     false,
            "csrfToken":  false,
          }
      register: tenant_auth_response

    ###
    # Debug: Test ORG-AUTH & ORG-INFO is working
    ###
    # # ORG-INFO - ALL
    # - name: Get ORG Info
    #   netapp.storagegrid.na_sg_org_info:
    #     gather_subset:
    #       - all
    #     <<: *org_auth
    #   register: grid_info_results

    # # DEBUG: PPrint ORG-INFO Response
    # - name: Print GRID Response
    #   debug:
    #     var: grid_info_results

    ###
    # Create Tenant Group
    - name: Create Tenant group
      netapp.storagegrid.na_sg_org_group:
        <<: *org_auth
 
        state:                        "{{ state }}"
        display_name:                 "{{ group.name }}"
        unique_name:                  "group/{{ group.name }}"
        management_policy:
          manage_all_containers:      "{{ group.mgmt_pol.all_containers }}"
          manage_endpoints:           "{{ group.mgmt_pol.endpoints }}"
          manage_own_s3_credentials:  "{{ group.mgmt_pol.mgmt_own_s3_creds }}"
          root_access:                "{{ group.mgmt_pol.root_access }}"
        s3_policy:                    "{{ group.s3_policy }}"

      # - name: EXAMPLE - create a group
      #   netapp.storagegrid.na_sg_org_group:
      #     api_url: "https://<storagegrid-endpoint-url>"
      #     auth_token: "storagegrid-auth-token"
      #     validate_certs: false
      #     state: present
      #     display_name: ansiblegroup1
      #     unique_name: group/ansiblegroup1
      #     management_policy:
      #       manage_all_containers: true
      #       manage_endpoints: true
      #       manage_own_s3_credentials: false
      #       root_access: false
      #     s3_policy: {"Statement":[{"Effect":"Deny","Action":"s3:*","Resource":"arn:aws:s3:::*"}]}